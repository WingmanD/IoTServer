<%inc
     #include <drogon/drogon.h>
%>
<%c++ 
    auto params = @@.get<std::unordered_map<std::string,std::string>>("params");
    auto username = @@.get<std::string>("username");
%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="300">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="/main.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.1/dist/chartjs-adapter-moment.min.js"></script>
    <script src="/renderchart.js"></script>
    <title>Water Leak Dashboard</title>   
</head>

<body>
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" href="/">Water Leak Dashboard</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
                aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                </li>
            </ul>
            <%c++ if (username.empty()) {%>
            <span class="navbar-text">
                <a class="nav-link" href="/auth/login">Login</a>
            </span>
            <%c++ } else {%>
            <span class="navbar-text">
                <a class="nav-link" href="" onclick="logout();return false;">{% username %} Logout</a>
            </span>
            <%c++ } %>
        </div>
    </div>
</nav>
<div class="container align-content-center blur">
    <br>
    <h2>Alarms</h2>
    <br>
    <div class="row">
        <span id="alError"></span>
    </div>
    <div class="row align-items-center" id="alarmBase">
        <div class="col-auto">
            <button>❌ Dismiss</button>
        </div>
        <div class="col">
            <span></span>
        </div>
    </div>
    <br><br>
    <h2>Devices</h2>
    <br>
    <div class="row align-items-center d-none" id="devcontainer">
        <div class="col-auto text-end">
            Virtual Device
        </div>
        <div class="col-auto" id="devstatus"></div>
        <div class="col"><button id="devdisable">❌ Shut down</button></div>
    </div>
    <br><br>
    <h2>Measurement History</h2>
    <br>
    <div class="row">
        <span id="chError"></span>
        <div class="col">
            <canvas id="chHumidity"></canvas>
        </div>
        <div class="col">
            <canvas id="chTemperature"></canvas>
        </div>
    </div>
</div>
</body>
</html>

<script>
async function GET(url) {
    var res = await fetch(url);
    if (res.status == 200) return await res.json();
    else if (res.status == 401) {
        logout();
    } else {
        return {
            status: "fetch ",
            errorCode: res.status.toString(),
            message: `Failed to GET ${url}`
        };
    }
}

async function POST_reload(url) {
    var res = await fetch(url, { method: 'POST' });
    if (res.status == 200) location.reload();
    else if (res.status == 401) {
        alert("Error: Your session has likely expired, please log in again.");
        logout();
    } else {
        alert(`Error: ${url} returned ${res.status}`);
        console.log(res);
    }
}

async function LoadAlarms() {
    var alarms = await GET("/alarm/");
    console.log(alarms);
    var err = document.getElementById("alError");
    var errRow = document.getElementById("alErrorRow");
    var base = document.getElementById("alarmBase");

    if (alarms.errorCode) {
        err.textContent = `${alarms.status}[${alarms.errorCode}]: ${alarms.message}`;
        base.remove();
        return;
    }

    alarms = alarms.data.filter(i => i.status === "ACTIVE_UNACK");
    
    if (alarms.length == 0) {
        err.textContent = "There are no active alarms at this time.";
        base.remove();
        return;
    }

    errRow.remove();

    alarms.sort((a, b) => b.createdTime - a.createdTime);

    for (const alarm of alarms) {
        var elem = base.cloneNode(true);
        elem.removeAttribute("id");
        elem.children[0].children[0].onclick = async () => await POST_reload(`/alarm/clear?id=${alarm.id.id}`);
        elem.children[1].children[0].textContent = `${new Date(alarm.createdTime).toLocaleString()}: ${alarm.severity} - ${alarm.name}`;
        base.after(elem);
    }

    base.remove();
}

async function LoadStatus() {
    var measurements = await GET("/measurements/status");
    document.getElementById("devstatus").textContent = measurements.client.active? "🟢 Active" : "🔴 Inactive";
    
    var btn = document.getElementById("devdisable");

    if (measurements.canDisable) {
        btn.onclick = async () => await POST_reload("/measurements/status?active=false");
    } else {
        btn.remove();
    }

    document.getElementById("devcontainer").classList.remove("d-none");
}

async function LoadMeasurements() {
    var telemetry = await GET("/measurements/");
    var err = document.getElementById("chError");

    if (telemetry.errorCode) {
        err.textContent = `${telemetry.status}[${telemetry.errorCode}]: ${telemetry.message}`;
        return;
    }

    err.remove();

    RenderChart(
        document.getElementById("chHumidity"),
        telemetry.humidity,
        "Humidity", "%", 0, 100
    );

    RenderChart(
        document.getElementById("chTemperature"),
        telemetry.temperature,
        "Temperature", "°C"
    );
}

function DeleteCookie(name) {
    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;';
}

function logout() {
    DeleteCookie("username");
    DeleteCookie("jwt");
    location.reload();
}

document.addEventListener("DOMContentLoaded", LoadAlarms);
document.addEventListener("DOMContentLoaded", LoadStatus);
document.addEventListener("DOMContentLoaded", LoadMeasurements);
</script>