//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "home.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>

     #include <drogon/drogon.h>

using namespace drogon;
std::string home::genText(const DrTemplateData& home_view_data)
{
	drogon::OStringStream home_tmp_stream;
	std::string layoutName{""};
 
    auto params = home_view_data.get<std::unordered_map<std::string,std::string>>("params");
    auto username = home_view_data.get<std::string>("username");
	home_tmp_stream << "<head>\n";
	home_tmp_stream << "    <meta charset=\"UTF-8\">\n";
	home_tmp_stream << "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n";
	home_tmp_stream << "    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\n";
	home_tmp_stream << "          integrity=\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\" crossorigin=\"anonymous\">\n";
	home_tmp_stream << "    <link rel=\"stylesheet\" href=\"/main.css\">\n";
	home_tmp_stream << "    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js\"></script>\n";
	home_tmp_stream << "    <script src=\"https://cdn.jsdelivr.net/npm/moment@2.29.4/moment.min.js\"></script>\n";
	home_tmp_stream << "    <script src=\"https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@1.0.1/dist/chartjs-adapter-moment.min.js\"></script>\n";
	home_tmp_stream << "    <title>Water Leak Dashboard</title>   \n";
	home_tmp_stream << "</head>\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "<body>\n";
	home_tmp_stream << "<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n";
	home_tmp_stream << "    <div class=\"container\">\n";
	home_tmp_stream << "        <a class=\"navbar-brand\" href=\"/\">Water Leak Dashboard</a>\n";
	home_tmp_stream << "        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n";
	home_tmp_stream << "                aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n";
	home_tmp_stream << "            <span class=\"navbar-toggler-icon\"></span>\n";
	home_tmp_stream << "        </button>\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n";
	home_tmp_stream << "            <ul class=\"navbar-nav mr-auto\">\n";
	home_tmp_stream << "                <li class=\"nav-item active\">\n";
	home_tmp_stream << "                    <a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n";
	home_tmp_stream << "                </li>\n";
	home_tmp_stream << "            </ul>\n";
	home_tmp_stream << "            ";
 if (username.empty()) {
	home_tmp_stream << "            <span class=\"navbar-text\">\n";
	home_tmp_stream << "                <a class=\"nav-link\" href=\"/auth/login\">Login</a>\n";
	home_tmp_stream << "            </span>\n";
	home_tmp_stream << "            ";
 } else {
	home_tmp_stream << "            <span class=\"navbar-text\">\n";
	home_tmp_stream << "                <a class=\"nav-link\" href=\"\" onclick=\"logout();return false;\">";
home_tmp_stream<<username;
	home_tmp_stream << " Logout</a>\n";
	home_tmp_stream << "            </span>\n";
	home_tmp_stream << "            ";
 } 
	home_tmp_stream << "        </div>\n";
	home_tmp_stream << "    </div>\n";
	home_tmp_stream << "</nav>\n";
	home_tmp_stream << "<div class=\"container align-content-center blur\">\n";
	home_tmp_stream << "    <br>\n";
	home_tmp_stream << "    <h1>Dashboard</h1>\n";
	home_tmp_stream << "    <br>\n";
	home_tmp_stream << "    <div class=\"container\">\n";
	home_tmp_stream << "        <span id=\"chError\"></span>\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "        <div class=\"chart\">\n";
	home_tmp_stream << "            <canvas id=\"chHumidity\"></canvas>\n";
	home_tmp_stream << "        </div>\n";
	home_tmp_stream << "        <div class=\"chart\">\n";
	home_tmp_stream << "            <canvas id=\"chTemperature\"></canvas>\n";
	home_tmp_stream << "        </div>\n";
	home_tmp_stream << "    </div>\n";
	home_tmp_stream << "</div>\n";
	home_tmp_stream << "</body>\n";
	home_tmp_stream << "</html>\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "<script>\n";
	home_tmp_stream << "function RenderChart(ch, data, title, unit, min = undefined, max = undefined) {\n";
	home_tmp_stream << "    return new Chart(ch, {\n";
	home_tmp_stream << "        type: \"line\",\n";
	home_tmp_stream << "        maintainAspectRatio: false,\n";
	home_tmp_stream << "        responsive: true,\n";
	home_tmp_stream << "        data: {\n";
	home_tmp_stream << "            labels: data.map(i => i.ts),\n";
	home_tmp_stream << "            datasets: [{\n";
	home_tmp_stream << "                data: data.map(i => i.value),\n";
	home_tmp_stream << "                fill: false,\n";
	home_tmp_stream << "                borderColor: 'rgb(75, 192, 192)',\n";
	home_tmp_stream << "                tension: 0.125\n";
	home_tmp_stream << "            }]\n";
	home_tmp_stream << "        },\n";
	home_tmp_stream << "        options: {\n";
	home_tmp_stream << "            scales: {\n";
	home_tmp_stream << "                x: {\n";
	home_tmp_stream << "                    type: 'time',\n";
	home_tmp_stream << "                    time: {\n";
	home_tmp_stream << "                        unit: 'hour'\n";
	home_tmp_stream << "                    },\n";
	home_tmp_stream << "                    title: {\n";
	home_tmp_stream << "                        display: true,\n";
	home_tmp_stream << "                        text: 'Time'\n";
	home_tmp_stream << "                    }\n";
	home_tmp_stream << "                },\n";
	home_tmp_stream << "                y: {\n";
	home_tmp_stream << "                    display: true,\n";
	home_tmp_stream << "                    title: {\n";
	home_tmp_stream << "                        display: true,\n";
	home_tmp_stream << "                        text: title\n";
	home_tmp_stream << "                    },\n";
	home_tmp_stream << "                    min: min,\n";
	home_tmp_stream << "                    max: max,\n";
	home_tmp_stream << "                    ticks: {\n";
	home_tmp_stream << "                        callback: (value, index, values) => value + unit\n";
	home_tmp_stream << "                    }\n";
	home_tmp_stream << "                }\n";
	home_tmp_stream << "            },\n";
	home_tmp_stream << "            tooltips: {\n";
	home_tmp_stream << "                callbacks: {\n";
	home_tmp_stream << "                    label: value => value + unit\n";
	home_tmp_stream << "                }\n";
	home_tmp_stream << "            },\n";
	home_tmp_stream << "            plugins: {\n";
	home_tmp_stream << "                legend: {\n";
	home_tmp_stream << "                    display: false\n";
	home_tmp_stream << "                }\n";
	home_tmp_stream << "            }\n";
	home_tmp_stream << "        }\n";
	home_tmp_stream << "    });\n";
	home_tmp_stream << "}\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "async function LoadTelemetry() {\n";
	home_tmp_stream << "    var telemetry = await (await fetch(\"/measurements/\")).json();\n";
	home_tmp_stream << "    var err = document.getElementById(\"chError\");\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "    if (telemetry.errorCode) {\n";
	home_tmp_stream << "        err.textContent = `${telemetry.status}[${telemetry.errorCode}]: ${telemetry.message}`;\n";
	home_tmp_stream << "        return;\n";
	home_tmp_stream << "    }\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "    err.remove();\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "    RenderChart(\n";
	home_tmp_stream << "        document.getElementById(\"chHumidity\"),\n";
	home_tmp_stream << "        telemetry.humidity,\n";
	home_tmp_stream << "        \"Humidity\", \"%\", 0, 100\n";
	home_tmp_stream << "    );\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "    RenderChart(\n";
	home_tmp_stream << "        document.getElementById(\"chTemperature\"),\n";
	home_tmp_stream << "        telemetry.temperature,\n";
	home_tmp_stream << "        \"Temperature\", \"Â°C\"\n";
	home_tmp_stream << "    );\n";
	home_tmp_stream << "}\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "function DeleteCookie(name) {\n";
	home_tmp_stream << "    document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;';\n";
	home_tmp_stream << "}\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "function logout() {\n";
	home_tmp_stream << "    DeleteCookie(\"username\");\n";
	home_tmp_stream << "    DeleteCookie(\"jwt\");\n";
	home_tmp_stream << "    location.reload();\n";
	home_tmp_stream << "}\n";
home_tmp_stream<<"\n";
	home_tmp_stream << "document.addEventListener(\"DOMContentLoaded\", LoadTelemetry);\n";
	home_tmp_stream << "</script>\n";
if(layoutName.empty())
{
std::string ret{std::move(home_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = home_view_data;
auto str = std::move(home_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
